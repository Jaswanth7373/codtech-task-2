/* To combine the concepts of a Library Management System with unsupervised learning techniques,
we need to integrate clustering algorithms into a system that could potentially analyze some characteristics of books or users in the library. 
For simplicity, let's assume we're clustering books based on some features like their genres or other numerical attributes.*/
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.metrics import silhouette_score, davies_bouldin_score
from sklearn.preprocessing import StandardScaler

# Step 1: Define the Library Management System
class Book:
    def __init__(self, title, author, genre, pages):
        self.title = title
        self.author = author
        self.genre = genre
        self.pages = pages

    def __str__(self):
        return f"Title: {self.title}, Author: {self.author}, Genre: {self.genre}, Pages: {self.pages}"

class Library:
    def __init__(self):
        self.books = []
        self.data = pd.DataFrame(columns=['Title', 'Author', 'Genre', 'Pages'])

    def add_book(self, book):
        self.books.append(book)
        self.data = pd.concat([self.data, pd.DataFrame([vars(book)])], ignore_index=True)
        print(f"Book '{book.title}' added to the library.")

    def list_books(self):
        if self.data.empty:
            print("No books in the library.")
        else:
            print(self.data)

# Step 2: Create a Library and Add Books
library = Library()

# Add some books with fictional data
books = [
    Book("1984", "George Orwell", "Dystopian", 328),
    Book("To Kill a Mockingbird", "Harper Lee", "Fiction", 281),
    Book("Moby Dick", "Herman Melville", "Adventure", 585),
    Book("The Great Gatsby", "F. Scott Fitzgerald", "Fiction", 180),
    Book("War and Peace", "Leo Tolstoy", "Historical", 1225)
]

for book in books:
    library.add_book(book)

# List books in the library
library.list_books()

# Step 3: Perform Clustering Analysis

# Extract features for clustering
X = library.data[['Pages']].values  # Using 'Pages' as a feature for clustering

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Define clustering algorithms
def apply_kmeans(X, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    labels = kmeans.fit_predict(X)
    return labels, kmeans

def apply_agglomerative(X, n_clusters):
    agg = AgglomerativeClustering(n_clusters=n_clusters)
    labels = agg.fit_predict(X)
    return labels, agg

def apply_dbscan(X):
    dbscan = DBSCAN(eps=0.5, min_samples=2)
    labels = dbscan.fit_predict(X)
    return labels, dbscan

def plot_clusters(X, labels, title):
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x=X[:, 0], y=np.zeros_like(X[:, 0]), hue=labels, palette='viridis', marker='o')
    plt.title(title)
    plt.xlabel('Pages')
    plt.ylabel('Cluster')
    plt.legend(title='Cluster')
    plt.show()

# Apply K-means clustering
kmeans_labels, kmeans_model = apply_kmeans(X_scaled, n_clusters=3)
print(f"K-means Silhouette Score: {silhouette_score(X_scaled, kmeans_labels):.3f}")
print(f"K-means Davies-Bouldin Index: {davies_bouldin_score(X_scaled, kmeans_labels):.3f}")
plot_clusters(X_scaled, kmeans_labels, 'K-means Clustering')

# Apply Agglomerative Clustering
agg_labels, agg_model = apply_agglomerative(X_scaled, n_clusters=3)
print(f"Agglomerative Clustering Silhouette Score: {silhouette_score(X_scaled, agg_labels):.3f}")
print(f"Agglomerative Clustering Davies-Bouldin Index: {davies_bouldin_score(X_scaled, agg_labels):.3f}")
plot_clusters(X_scaled, agg_labels, 'Agglomerative Clustering')

# Apply DBSCAN
dbscan_labels, dbscan_model = apply_dbscan(X_scaled)
print(f"DBSCAN Silhouette Score: {silhouette_score(X_scaled, dbscan_labels, metric='euclidean') if len(set(dbscan_labels)) > 1 else 'undefined'}")
print(f"DBSCAN Davies-Bouldin Index: {davies_bouldin_score(X_scaled, dbscan_labels) if len(set(dbscan_labels)) > 1 else 'undefined'}")
plot_clusters(X_scaled, dbscan_labels, 'DBSCAN Clustering')
